---
# Create a service account for the NFS server
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nfs-server-sa
  namespace: petloan-instructlab
---
# Create a SecurityContextConstraints to allow privileged containers
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: nfs-server-scc
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegedContainer: true
allowedCapabilities:
- SYS_ADMIN
- NET_BIND_SERVICE
defaultAddCapabilities: []
fsGroup:
  type: RunAsAny
priority: null
readOnlyRootFilesystem: false
requiredDropCapabilities: []
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
supplementalGroups:
  type: RunAsAny
users:
- system:serviceaccount:petloan-instructlab:nfs-server-sa
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret
---
# Create a PVC for the NFS server storage backend
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-server-storage
  namespace: petloan-instructlab
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Gi
  storageClassName: gp3
---
# NFS Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nfs-server
  namespace: petloan-instructlab
  labels:
    app: nfs-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nfs-server
  template:
    metadata:
      labels:
        app: nfs-server
    spec:
      serviceAccountName: nfs-server-sa
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
      containers:
      - name: nfs-server
        image: registry.redhat.io/ubi9/ubi:latest
        imagePullPolicy: Always
        securityContext:
          privileged: true
          capabilities:
            add:
              - SYS_ADMIN
              - NET_BIND_SERVICE
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Installing NFS server..."
          dnf update -y
          dnf install -y nfs-utils rpcbind
          
          echo "Setting up NFS directories..."
          mkdir -p /nfs-share/data
          chmod 777 /nfs-share/data
          chown nobody:nobody /nfs-share/data
          
          echo "Configuring NFS exports..."
          echo '/nfs-share/data *(rw,sync,no_root_squash,no_subtree_check,insecure)' > /etc/exports
          
          echo "Starting NFS services..."
          rpcbind
          rpc.nfsd 8
          rpc.mountd --no-tcp
          exportfs -ra
          
          echo "NFS server is ready!"
          exportfs -v
          
          # Keep the container running
          tail -f /dev/null
        ports:
        - containerPort: 2049
          name: nfs
          protocol: TCP
        - containerPort: 111
          name: rpcbind
          protocol: TCP
        - containerPort: 20048
          name: mountd
          protocol: TCP
        volumeMounts:
        - name: nfs-storage
          mountPath: /nfs-share/data
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "showmount -e localhost"
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 2049
          initialDelaySeconds: 30
          periodSeconds: 30
      volumes:
      - name: nfs-storage
        persistentVolumeClaim:
          claimName: nfs-server-storage
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - operator: Exists
---
# NFS Server Service
apiVersion: v1
kind: Service
metadata:
  name: nfs-server-service
  namespace: petloan-instructlab
  labels:
    app: nfs-server
spec:
  selector:
    app: nfs-server
  ports:
  - name: nfs
    port: 2049
    targetPort: 2049
    protocol: TCP
  - name: rpcbind
    port: 111
    targetPort: 111
    protocol: TCP
  - name: mountd
    port: 20048
    targetPort: 20048
    protocol: TCP
  type: ClusterIP
