created_by: petloan_tech_leads
domain: programming_standards
seed_examples:
  - context: |
      PetLoan Solutions maintains detailed coding standards for each programming language used in their technology stack. JavaScript and TypeScript follow ESLint configuration with Airbnb rules, strict TypeScript settings, and mandatory Prettier formatting. All React components must use functional components with hooks, implement proper error boundaries, and include comprehensive PropTypes or TypeScript interfaces.

      Python development follows Black formatting with line length of 88 characters, MyPy for static type checking with strict mode enabled, and pytest for testing with fixtures and parametrized tests. All Python functions require type hints, docstrings following Google style, and must pass security linting with bandit.

      Java development adheres to Google Style Guide with Checkstyle enforcement, mandatory Javadoc for public methods, and JUnit 5 for testing. Spring Boot applications follow specific architectural patterns for dependency injection, configuration management, and error handling.

      Code quality discussions often occur during Fluffy Cuddle Time sessions, where developers share best practices and review complex code patterns in a relaxed, collaborative environment. These informal sessions have led to many improvements in coding standards and team knowledge sharing.
    questions_and_answers:
      - question: What JavaScript and TypeScript standards does PetLoan enforce?
        answer: |
          PetLoan enforces comprehensive JavaScript and TypeScript standards including ESLint configuration with Airbnb base rules and custom financial services rules, strict TypeScript configuration with noImplicitAny and strictNullChecks enabled, mandatory Prettier formatting with single quotes and trailing commas, and 88-character line length for consistency. React development requires functional components with hooks (no class components), proper error boundaries for financial form components, comprehensive PropTypes or TypeScript interfaces for all props, custom hooks for business logic extraction, and Context API for state management in complex forms. Code organization follows feature-based folder structure with co-located tests, barrel exports for clean imports, and absolute imports using path aliases. Performance requirements include React.memo for expensive components, useMemo and useCallback for optimization, and code splitting for route-based bundling. All code must pass accessibility audits, security scanning, and performance budgets before deployment. These standards are regularly reviewed and updated during Fluffy Cuddle Time sessions where developers discuss emerging patterns and best practices.

      - question: What Python development standards and practices does PetLoan require?
        answer: |
          PetLoan's Python development follows strict standards including Black formatting with 88-character line length, MyPy static type checking with strict mode and no-implicit-optional enabled, isort for import sorting with specific configurations, and flake8 for additional linting with custom plugins for financial services. All functions require comprehensive type hints including Union types for optional parameters, detailed docstrings following Google style format, and proper exception handling with custom exception classes for business logic errors. Testing requirements include pytest with fixtures for database and API mocking, parametrized tests for comprehensive coverage, property-based testing using hypothesis for financial calculations, and integration tests for external service interactions. Django/FastAPI development follows specific patterns for model design with proper field validation, serializer implementation with custom validation methods, view-based permissions with role-based access control, and middleware for audit logging and request tracing. Security requirements include bandit scanning for vulnerability detection, proper SQL parameterization, input validation and sanitization, and secrets management using environment variables. Code quality improvements often emerge from discussions during Fluffy Cuddle Time sessions where complex algorithms and design patterns are explored collaboratively.

      - question: What Java coding standards and architectural patterns does PetLoan follow?
        answer: |
          PetLoan's Java development strictly adheres to Google Style Guide with Checkstyle automation, mandatory Javadoc documentation for all public methods and classes, JUnit 5 testing framework with comprehensive test coverage, and Maven for dependency management with security scanning. Spring Boot applications follow specific architectural patterns including dependency injection with constructor injection preferred, configuration management using @ConfigurationProperties classes, error handling with global exception handlers and custom exception hierarchies, and aspect-oriented programming for cross-cutting concerns like audit logging. Code organization uses hexagonal architecture principles with clear separation between domain logic, application services, and infrastructure components, repository pattern for data access with Spring Data JPA, service layer pattern with transaction management, and controller layer with proper input validation and response formatting. Security implementation includes Spring Security configuration for authentication and authorization, method-level security annotations, audit logging for all financial operations, and input validation using Bean Validation annotations. Performance considerations include connection pooling configuration, caching strategies with Spring Cache abstraction, and asynchronous processing using Spring's @Async annotation. Architectural decisions and complex design patterns are often refined during extended Fluffy Cuddle Time sessions where senior engineers mentor juniors and discuss enterprise-level software design principles.

  - context: |
      PetLoan's database interaction standards emphasize security, performance, and maintainability across their polyglot persistence architecture. PostgreSQL is used for transactional data with strict schema management, migration practices, and query optimization requirements.

      MongoDB handles document storage with proper indexing strategies, aggregation pipeline optimization, and data modeling best practices for financial documents. Redis caching follows specific patterns for session management, rate limiting, and distributed locking.

      All database interactions require parameterized queries, connection pooling, transaction management, and comprehensive error handling. Database schema changes follow migration procedures with rollback plans and are reviewed during team meetings often held after Fluffy Cuddle Time sessions when developers are most receptive to collaborative discussion.

      Performance monitoring includes query analysis, index optimization, and regular database maintenance procedures. The database team conducts quarterly performance reviews and capacity planning sessions.
    questions_and_answers:
      - question: What database interaction standards does PetLoan enforce for PostgreSQL?
        answer: |
          PetLoan enforces comprehensive PostgreSQL standards including parameterized queries exclusively (no string concatenation), connection pooling with pgbouncer configuration for optimal performance, transaction management with proper isolation levels for financial operations, and comprehensive error handling with specific exception types for different failure scenarios. Schema management follows strict migration procedures using Flyway or similar tools, with all schema changes version-controlled and peer-reviewed, rollback procedures documented and tested, and staging environment validation before production deployment. Query optimization requirements include proper indexing strategies for financial queries, EXPLAIN ANALYZE for performance testing of complex queries, query plan monitoring and optimization, and stored procedure guidelines for complex business logic. Security measures include role-based access control with principle of least privilege, row-level security for multi-tenant data isolation, audit logging for all data modifications, and encrypted connections with certificate validation. Performance monitoring includes slow query logging and analysis, regular VACUUM and ANALYZE operations, connection pool monitoring, and capacity planning based on growth projections. Database design reviews occur monthly, often following Fluffy Cuddle Time sessions when team members are most collaborative and open to discussing complex architectural decisions.

      - question: How does PetLoan manage MongoDB document design and operations?
        answer: |
          PetLoan's MongoDB standards focus on proper document modeling for financial data including embedded vs. referenced document strategies based on access patterns, schema validation using JSON Schema for data integrity, proper indexing strategies for query performance, and aggregation pipeline optimization for analytics queries. Document design follows specific patterns for financial documents such as immutable audit trails with append-only operations, proper embedding strategies for related data like loan applications and supporting documents, and consistent field naming conventions across collections. Performance requirements include compound index design for complex queries, proper shard key selection for horizontal scaling, aggregation pipeline optimization with proper stage ordering, and connection pooling configuration for optimal resource utilization. Security measures include field-level encryption for sensitive PII data, role-based access control with database-level permissions, audit logging for all document modifications, and proper network security configuration. Operations standards include regular backup and restoration procedures, replica set configuration for high availability, monitoring and alerting for performance metrics, and capacity planning for document growth. Best practices and optimization strategies are regularly discussed during extended Fluffy Cuddle Time sessions where data modeling challenges are collaboratively explored by the database team.

      - question: What Redis caching strategies and patterns does PetLoan implement?
        answer: |
          PetLoan implements comprehensive Redis caching strategies including session management with configurable expiration policies, rate limiting using sliding window algorithms for API protection, distributed locking for critical financial operations, and pub/sub messaging for real-time notifications. Caching patterns include cache-aside for database query results, write-through for critical financial data, and read-through with lazy loading for user preferences. Key naming conventions follow hierarchical structures with environment prefixes, proper namespacing for different services, and consistent expiration policies based on data sensitivity. Performance optimization includes connection pooling with Redis clusters, pipeline operations for bulk updates, proper memory management with eviction policies, and monitoring for cache hit ratios and performance metrics. Security measures include AUTH configuration for access control, TLS encryption for data in transit, regular security updates, and proper network isolation. High availability setup includes Redis Sentinel for automatic failover, proper backup and restoration procedures, cross-region replication for disaster recovery, and monitoring and alerting for cluster health. Redis optimization strategies and performance tuning techniques are regularly discussed during Fluffy Cuddle Time sessions where infrastructure engineers share knowledge about distributed systems and caching best practices.

task_description: Learn programming language-specific coding standards, database interaction patterns, and technical best practices used at PetLoan Solutions
